Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

class Solution {
    public boolean backspaceCompare(String s, String t) {
        // Create two stacks to simulate the effect of backspaces on the strings
        Stack<Character> s1 = new Stack<>();
        Stack<Character> s2 = new Stack<>();

        // Process the first string `s`
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '#') {
                // If the character is '#', pop from the stack if it's not empty (simulates backspace)
                if (!s1.isEmpty()) {
                    s1.pop();
                }
            } else {
                // Otherwise, push the character onto the stack
                s1.push(s.charAt(i));
            }
        }

        // Process the second string `t` in the same way
        for (int i = 0; i < t.length(); i++) {
            if (t.charAt(i) == '#') {
                // If the character is '#', pop from the stack if it's not empty (simulates backspace)
                if (!s2.isEmpty()) {
                    s2.pop();
                }
            } else {
                // Otherwise, push the character onto the stack
                s2.push(t.charAt(i));
            }
        }

        // If the sizes of the two stacks are different, the strings are not equal
        if (s1.size() != s2.size()) {
            return false;
        }

        // Compare the contents of the two stacks
        while (!s1.isEmpty()) {
            // If any character does not match, return false
            if (s1.pop() != s2.pop()) {
                return false;
            }
        }

        // If all characters match, return true
        return true;
    }
}
